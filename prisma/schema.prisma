// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(uuid())
  username          String
  email             String           @unique
  profile           String
  // Other user details
  Note              Note[]
  userLists         List[]
  WeeklyCalendar    WeeklyCalendar[]
  comments          Comment[]
  userProblemStatus ProblemStatus[]
}

model Problem {
  id                Int              @id @default(autoincrement())
  title             String           @unique
  titleSlug         String
  frontEndId        String?
  description       String?
  difficulty        String
  // Other problem details
  topics            Topic[]          @relation("ProblemTags")
  lists             List[]
  Note              Note[]
  Comment           Comment[]
  PlatformLinks     Platform[]
  CompanyProblem    CompanyProblem[]
  userProblemStatus ProblemStatus[]
}

model Topic {
  id       Int              @id @default(autoincrement())
  name     String           @unique
  slug     String
  // Other tag details
  problems Problem[]        @relation("ProblemTags")
  days     TopicToWeekDay[]
}

model Company {
  id        Int              @id @default(autoincrement())
  name      String           @unique
  slug      String
  companies CompanyProblem[] // A company can ask multiple problems
}

model List {
  id       String    @id @default(uuid())
  name     String    @unique
  slug     String
  isPublic Boolean
  // Other list details
  userId   String?
  user     User?     @relation(fields: [userId], references: [id])
  problems Problem[]
}

model Platform {
  id        Int     @id @default(autoincrement())
  link      String  @unique
  name      String  @default("leetcode")
  problemId Int
  problem   Problem @relation(fields: [problemId], references: [id])
}

model CompanyProblem {
  id        Int     @id @default(autoincrement())
  count     Int
  companyId Int
  problemId Int
  // Other company problem details
  company   Company @relation(fields: [companyId], references: [id])
  problem   Problem @relation(fields: [problemId], references: [id])
}

model ProblemStatus {
  id        Int      @id @default(autoincrement())
  userId    String
  problemId Int
  status    String
  updatedAt DateTime @default(now()) @updatedAt
  // Other status details
  user      User     @relation(fields: [userId], references: [id])
  problem   Problem  @relation(fields: [problemId], references: [id])

  @@unique([userId, problemId], name: "UserProblemStatusUnique")
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      String
  problemId   Int
  comment     String
  commentTime DateTime
  // Other comment details
  user        User     @relation(fields: [userId], references: [id])
  problem     Problem  @relation(fields: [problemId], references: [id])
}

model Note {
  id        Int      @id @default(autoincrement())
  userId    String
  problemId Int
  note      String
  noteTime  DateTime
  // Other note details
  user      User     @relation(fields: [userId], references: [id])
  problem   Problem  @relation(fields: [problemId], references: [id])

  @@unique([userId, problemId], name: "UserProblemStatusUnique")
}

model WeeklyCalendar {
  id        String    @id @default(uuid())
  title     String // Title or description of the calendar
  owner     User      @relation(fields: [ownerId], references: [id])
  ownerId   String
  days      WeekDay[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model WeekDay {
  id               Int              @id @default(autoincrement())
  name             String // E.g., "Monday", "Tuesday", etc.
  date             DateTime
  weeklyCalendarId String
  weeklyCalendar   WeeklyCalendar   @relation(fields: [weeklyCalendarId], references: [id])
  topics           TopicToWeekDay[]
}

// Join table for many-to-many relationship between WeekDay and Topic
model TopicToWeekDay {
  topicId   Int
  weekDayId Int
  topics    Topic   @relation(fields: [topicId], references: [id])
  weekDay   WeekDay @relation(fields: [weekDayId], references: [id])

  @@id([topicId, weekDayId]) // Composite primary key
}
